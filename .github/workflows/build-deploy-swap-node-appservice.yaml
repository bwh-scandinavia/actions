name: Build, Deploy & Swap Appservice

on:
  workflow_call:
    inputs:
      SKIP_DEPLOY:
        required: false
        default: false
        type: boolean
      ENVIRONMENT:
        required: true
        type: string
      NODE_VERSION:
        required: true
        type: string
      SLACK_CHANNEL:
        required: false
        type: string
        default: "#github-builds"
      APP_NAME:
        required: true
        type: string
      SLOT_NAME:
        required: false
        type: string
        default: "Staging"
      RESOURCE_GROUP:
        required: false
        type: string
      AZURE_TENANT_ID:
        type: string
        required: false
        default: "3355f402-0421-407d-91a8-9927ca0743d6"
      ENV:
        type: string
        required: false
        default: ""
    secrets:
      SLACK_WEBHOOK_URL:
        required: false
      NODE_AUTH_TOKEN:
        required: false
      APP_DEPLOYMENT_CLIENT_ID:
        required: true
      APP_DEPLOYMENT_CLIENT_SECRET:
        required: true

jobs:
  build-deploy:
    name: Build & Deploy to ${{ inputs.ENVIRONMENT }}
    environment: ${{ inputs.ENVIRONMENT }}
    concurrency: ${{ github.workflow }}-${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
      RESOURCE_GROUP: ${{ inputs.RESOURCE_GROUP}}
      APP_NAME: ${{ inputs.APP_NAME}}
      SLOT_NAME: ${{ inputs.SLOT_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Expand ENV variables from input
        if: ${{ inputs.ENV != '' }}
        run: echo "$ENV" | sed -z 's/:\ /=/g' >> $GITHUB_ENV
        env:
          ENV: ${{ inputs.ENV }}

      - name: Initialize Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.NODE_VERSION }}

      - name: Authenticate npm
        run: |
          if [[ -n "${NODE_AUTH_TOKEN}" ]]; then
            echo "" >> .npmrc
            echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
            echo "NODE_AUTH_TOKEN has been added to .npmrc"
          else
            echo "NODE_AUTH_TOKEN not provided, skipping npm auth"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      # - run: npm audit
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run build
      - run: npm run test --if-present
      - run: npm prune --production

      - name: Create deployment package
        run: |
          zip -r archive.zip \
            build/** \
            dist/** \
            node_modules/**/** \
            package.json \
            config/** \
            **/schema.graphql \
            -x '*.git*'

      # Remove me when all apps build fine
      - name: Save ZIP as artifact
        uses: actions/upload-artifact@v3
        with:
          name: "zip ${{ inputs.APP_NAME }}"
          path: archive.zip
          retention-days: 1

      - name: "Login via Azure CLI"
        uses: azure/login@v1.1
        with:
          creds: '{"clientId":"${{ secrets.APP_DEPLOYMENT_CLIENT_ID }}","clientSecret":"${{ secrets.APP_DEPLOYMENT_CLIENT_SECRET }}", "subscriptionId": "${{ inputs.ENVIRONMENT}}","tenantId":"${{ inputs.AZURE_TENANT_ID }}"}'

      - name: Set subscription to ${{ inputs.ENVIRONMENT }}
        run: az account set -s $ENVIRONMENT

      - name: Create Staging Swap Slot
        run: az webapp deployment slot create --name $APP_NAME --resource-group $RESOURCE_GROUP --slot Staging

      - name: Deploy Azure App Service (${{ inputs.ENVIRONMENT }})
        if: ${{ !inputs.SKIP_DEPLOY }}
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.APP_NAME }}
          slot-name: "Staging"
          package: archive.zip

      - name: Swapperino
        run: az webapp deployment slot swap --name $APP_NAME --resource-group $RESOURCE_GROUP --slot $SLOT_NAME --target-slot Production

      - name: Delete Staging Swap Slot
        run: az webapp deployment slot delete --name $APP_NAME --resource-group $RESOURCE_GROUP --slot $SLOT_NAME
